<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="License.Certificates.WebHome" locale="">
  <web>License.Certificates</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>License.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{include reference="License.Code.LicenseDetailsMacros" /}}

{{velocity output="false"}}
#set ($certificateStore = $services.crypto.store.getX509SpaceCertificateStore(
  $services.model.resolveSpace('License.Certificates')))

#macro (getValidCertificates)
  #set ($validCertificates = [])
  #foreach ($certificate in $certificateStore.getAllCertificates())
    #if ($datetool.date.before($certificate.notAfter))
      #set ($discard = $validCertificates.add($certificate))
    #end
  #end
  #set ($validCertificates = $sorttool.sort($validCertificates, 'notAfter'))
#end

#macro (getExpiredCertificates)
  #set ($expiredCertificates = [])
  #foreach ($certificate in $certificateStore.getAllCertificates())
    #if ($datetool.date.after($certificate.notAfter))
      #set ($discard = $expiredCertificates.add($certificate))
    #end
  #end
  #set ($expiredCertificates = $sorttool.sort($expiredCertificates, 'notBefore:desc'))
#end

#macro (certificatesTable $certificates)
  |=Name|=Expires|=Issued
  #foreach ($certificate in $certificates)
    |$certificate.subject.name|$certificate.notAfter|$certificate.notBefore
  #end
#end
{{/velocity}}

{{velocity}}
= Valid Certificates =

The following certificates are valid:

#getValidCertificates()
#certificatesTable($validCertificates)

= Expired Certificates =

#if ($request.countBrokenLicenses == 1)
  #getActiveLicensesToRegenerate()
  #if ($licensesToRegenerate.isEmpty())
    {{info}}There are no active licenses signed with expired certificates.{{/info}}
  #else
    {{warning}}There are $licensesToRegenerate.size() active licenses signed with expired certificates!{{/warning}}
  #end
  #set ($aboutToExpire = $activeLicenses.size() - $licensesToRegenerate.size())
  #if ($aboutToExpire &gt; 0)

    {{warning}}There are $aboutToExpire active licenses signed with certificates that are about to expire!{{/warning}}
  #end
#else
  [[Count broken licenses&gt;&gt;||anchor="HExpiredCertificates" queryString="countBrokenLicenses=1" class="btn btn-default"]]
#end

The following certificates are expired:

#getExpiredCertificates()
#certificatesTable($expiredCertificates)

= All Certificates =

#set($columns = ['doc.name', 'subject', 'keyid', 'issuer', 'serial'])
#set($columnsProperties = {
  'doc.name' : { 'type' : 'text', 'link' : 'view' },
  'subject' : { 'type' : 'text' },
  'keyid' : { 'type' : 'text' },
  'issuer' : { 'type' : 'text' },
  'serial' : { 'type' : 'text' }
})
#set($options = { 
   'className' : 'Crypto.CertificateClass',
   'translationPrefix' : 'certificates.'
})
#livetable('certificates' $columns $columnsProperties $options)
{{/velocity}}</content>
</xwikidoc>
