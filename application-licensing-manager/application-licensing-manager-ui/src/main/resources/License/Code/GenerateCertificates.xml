<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="License.Code.GenerateCertificates" locale="">
  <web>License.Code</web>
  <name>GenerateCertificates</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:License.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Generate Yearly Certificates</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (displayFormToRegenerateCertificates)
  This will generate License Certificates for ${datetool.year}.

  {{html}}
  &lt;form class="xform" action="" method="POST"&gt;
   &lt;dl&gt;
    &lt;dt&gt;Free Key Intermediate CA password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="freeCAPassword" /&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Trial Key Intermediate CA password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="trialCAPassword" /&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Paid Key Intermediate CA password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="paidCAPassword" /&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Free Key Issuer new password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="freePassword" /&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Trial Key Issuer new password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="trialPassword" /&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Paid Key Issuer new password&lt;/dt&gt;
    &lt;dd&gt;
      &lt;input type="password" name="paidPassword" /&gt;
    &lt;/dd&gt;
   &lt;/dl&gt;
  &lt;p&gt;
    &lt;input class="btn btn-primary" type="submit" name="action" value="Generate" /&gt;
  &lt;/p&gt;
  &lt;/form&gt;
  {{/html}}
#end

#macro (regenerateCertificates)
  #set ($keystore = $services.crypto.store.getX509FileKeyStore('license-keystore'))
  #set ($certstore = $services.crypto.store.getX509SpaceCertificateStore($services.model.resolveSpace('License.Certificates')))
  #set ($freeIssuerCertificate = $NULL)
  #set ($paidIssuerCertificate = $NULL)
  #set ($trialIssuerCertificate = $NULL)
  ## Retrieve the intermediate certificates used to sign the issuer certificates we're going to generate.
  #foreach ($certifiedPublicKey in $certstore.getAllCertificates())
    #set ($subject = $certifiedPublicKey.subject.name)
    #if ($subject == 'CN=Trial License Intermediate CA,OU=Licensing,O=XWiki SAS,L=Paris,C=FR')
      #set ($trialInterCA = $keystore.retrieve($certifiedPublicKey, $request.trialCAPassword))
    #elseif ($subject == 'CN=Free License Intermediate CA,OU=Licensing,O=XWiki SAS,L=Paris,C=FR')
      #set ($freeInterCA = $keystore.retrieve($certifiedPublicKey, $request.freeCAPassword))
    #elseif ($subject == 'CN=Paid License Intermediate CA,OU=Licensing,O=XWiki SAS,L=Paris,C=FR')
      #set ($paidInterCA = $keystore.retrieve($certifiedPublicKey, $request.paidCAPassword))
    ## Make sure we don't generate multiple issuer certificates for the same year.
    #elseif ($subject == "CN=Free License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
      #set ($freeIssuerCertificate = $certifiedPublicKey)
    #elseif ($subject == "CN=Paid License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
      #set ($paidIssuerCertificate = $certifiedPublicKey)
    #elseif ($subject == "CN=Trial License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
      #set ($trialIssuerCertificate = $certifiedPublicKey)
    #end
  #end
  ## Generate and store the new issuer certificates if they don't exist already.
  #if (!$freeIssuerCertificate)
    #set ($keyPair = $services.crypto.rsa.generateKeyPair())
    #set ($freeKeyPair = $services.crypto.rsa.issueCertificate($freeInterCA, $keyPair,
      "CN=Free License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR", 740,
      [$services.crypto.x509name.createX509Rfc822Name('contact@xwiki.com')]))
    #set ($discard = $keystore.store($freeKeyPair, $request.freePassword))
    #set ($freeIssuerCertificate = $freeKeyPair.certificate)
    #set ($discard = $certstore.store($freeIssuerCertificate))
  #end
  #if (!$trialIssuerCertificate)
    #set ($keyPair = $services.crypto.rsa.generateKeyPair())
    #set ($trialKeyPair = $services.crypto.rsa.issueCertificate($trialInterCA, $keyPair,
      "CN=Trial License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR", 740,
      [$services.crypto.x509name.createX509Rfc822Name('trial@xwiki.com')]))
    #set ($discard = $keystore.store($trialKeyPair, $request.trialPassword))
    #set ($trialIssuerCertificate = $trialKeyPair.certificate)
    #set ($discard = $certstore.store($trialIssuerCertificate))
  #end
  #if (!$paidIssuerCertificate)
    #set ($keyPair = $services.crypto.rsa.generateKeyPair())
    #set ($paidKeyPair = $services.crypto.rsa.issueCertificate($paidInterCA, $keyPair,
      "CN=Paid License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR", 740,
      [$services.crypto.x509name.createX509Rfc822Name('contact@xwiki.com')]))
    #set ($discard = $keystore.store($paidKeyPair, $request.paidPassword))
    #set ($paidIssuerCertificate = $paidKeyPair.certificate)
    #set ($discard = $certstore.store($paidIssuerCertificate))
  #end
#end
{{/velocity}}

{{velocity}}
#if ("$!request.action" != 'Generate')
  #displayFormToRegenerateCertificates()
#else
  #regenerateCertificates()
  #if ($xcontext.action == 'get')
    #set ($discard = $response.setContentType('application/json'))
  #end
  #set ($base64Encoder = $services.component.componentManager.getInstance('org.xwiki.crypto.BinaryStringEncoder', 'Base64'))
  #set ($hexEncoder = $services.component.componentManager.getInstance('org.xwiki.crypto.BinaryStringEncoder', 'Hex'))
  #set ($generated = $freeKeyPair || $trialKeyPair || $paidKeyPair)
  $jsontool.serialize({
    "generated": $generated,
    "intermediate-certificates": {
      "free": $freeInterCA.certificate.subject.name,
      "paid": $paidInterCA.certificate.subject.name,
      "trial": $trialInterCA.certificate.subject.name
    },
    "issuer-key-pairs": {
      "free": [
        $hexEncoder.encode($freeIssuerCertificate.subjectKeyIdentifier),
        $base64Encoder.encode($freeIssuerCertificate.subjectKeyIdentifier)
      ],
      "paid": [
        $hexEncoder.encode($paidIssuerCertificate.subjectKeyIdentifier),
        $base64Encoder.encode($paidIssuerCertificate.subjectKeyIdentifier)
      ],
      "trial": [
        $hexEncoder.encode($trialIssuerCertificate.subjectKeyIdentifier),
        $base64Encoder.encode($trialIssuerCertificate.subjectKeyIdentifier)
      ]
    }
  })
#end
{{/velocity}}</content>
</xwikidoc>
